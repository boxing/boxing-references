{"version":3,"sources":["components/youtube.tsx","components/search.tsx","data.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Youtube","props","useState","play","show","setPlay","ytPlayerState","setYtPlayerState","setTimeout","opts","playerVars","autoplay","end","start","ytStates","YouTube","PlayerState","Button","variant","color","onClick","PLAYING","UNSTARTED","ENDED","PAUSED","CUED","BUFFERING","Box","component","display","videoId","source","id","onStateChange","e","data","Lyrics","styled","div","GithubLink","span","TwitterLink","Search","searchResults","setSearchResults","search","setSearch","searchType","setSearchType","useEffect","songs","value","includes","songParam","val","songParamWithNoAccents","normalize","replace","toLowerCase","filter","song","artist","singer","lyrics","boxer","year","parseInt","SearchSongs","document","title","className","noValidate","autoComplete","mr","TextField","label","spellCheck","onChange","target","FormControl","InputLabel","Select","native","Link","rel","href","length","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","i","metadata","genius","genre","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c35f1b00.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport {Box, Button} from \"@material-ui/core\";\r\nimport YouTube, {Options} from 'react-youtube';\r\nimport PlayArrow from '@material-ui/icons/PlayArrow';\r\nimport Pause from '@material-ui/icons/Pause';\r\n\r\nfunction Youtube(props: { id: string, source: string, start: number, end: number }) {\r\n    const [play, setPlay] = useState({play: false, show: false});\r\n    const [ytPlayerState, setYtPlayerState] = useState<number>(-1);\r\n    const setToPlay = () => setPlay({play: true, show: false});\r\n    // clicking play sets `show` to false, which then\r\n    // sets a timeout to set it again to true\r\n    // it unrenders and rerenders the iframe element\r\n    if (play.play && !play.show) {\r\n        setTimeout(() => setPlay({play: true, show: true}), 0);\r\n    }\r\n\r\n    const opts = {\r\n        playerVars: {\r\n            autoplay: 1,\r\n            end: props.end,\r\n            start: props.start,\r\n        }\r\n    } as Options;\r\n\r\n    function stateChange(e: { target: any; data: number }) {\r\n        setYtPlayerState(e.data);\r\n    }\r\n\r\n    const ytStates = YouTube.PlayerState;\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={setToPlay}>\r\n                {ytPlayerState === ytStates.PLAYING && <Pause/>}\r\n                {(ytPlayerState === ytStates.UNSTARTED || ytPlayerState === ytStates.ENDED || ytPlayerState === ytStates.PAUSED) &&\r\n                <PlayArrow/>}\r\n                {(ytPlayerState === ytStates.CUED || ytPlayerState === ytStates.BUFFERING) &&\r\n                <span>LOADING</span>}\r\n            </Button>\r\n\r\n            {play.play && play.show &&\r\n            <Box component=\"div\" display=\"none\">\r\n                <YouTube\r\n                    videoId={props.source}\r\n                    id={props.id}\r\n                    opts={opts}\r\n                    onStateChange={stateChange}\r\n                />\r\n            </Box>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Youtube;\r\n","import {\r\n    Box,\r\n    FormControl,\r\n    InputLabel,\r\n    Link,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\nimport Youtube from \"./youtube\";\r\nimport {song} from \"../data\";\r\nimport styled from 'styled-components';\r\nimport GitHub from '@material-ui/icons/GitHub';\r\nimport Twitter from '@material-ui/icons/Twitter';\r\n\r\nconst Lyrics = styled.div`\r\n    white-space: pre-wrap;\r\n    font-style: italic;\r\n \r\n    &::before, &&::after {\r\n        content: '\"';\r\n    }\r\n`;\r\n\r\nconst GithubLink = styled.span`\r\n    position: relative;\r\n    margin: 0 10px;\r\n    top: 10px;\r\n    svg {\r\n        color: black;    \r\n    }\r\n`;\r\n\r\nconst TwitterLink = styled.span`\r\n    position: relative;\r\n    margin: 0 10px;\r\n    top: 10px;\r\n    svg {\r\n        color: rgba(29,161,242,1.00);\r\n    }\r\n`\r\n\r\ntype SearchType = \"all\" | \"artist\" | \"song\" | \"lyrics\" | \"boxer\";\r\n\r\nfunction SearchSongs(songs: song[], value: string, searchType: SearchType): song[] {\r\n    if (value === '') {\r\n        return songs;\r\n    }\r\n\r\n    const includes = (songParam: string, val: string): boolean => {\r\n        // takes the song value and removes all accents for additional searching\r\n        const songParamWithNoAccents = songParam.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n        return songParam.toLowerCase().includes(val) || songParamWithNoAccents.toLowerCase().includes(val);\r\n    }\r\n\r\n    return songs.filter(song => {\r\n        const val: string = value.toLowerCase();\r\n\r\n        if (\r\n            (searchType === \"artist\" && (includes(song.artist, val) || includes(song.singer, val)))\r\n            || (searchType === \"song\" && includes(song.song, val))\r\n            || (searchType === \"lyrics\" && includes(song.lyrics, val))\r\n            || (searchType === \"boxer\" && includes(song.boxer, val))\r\n        ) {\r\n            return true;\r\n        } else if (searchType === \"all\") {\r\n            if (includes(song.boxer, val)) {\r\n                return true;\r\n            }\r\n\r\n            if (includes(song.artist, val) || includes(song.singer, val)) {\r\n                return true;\r\n            }\r\n\r\n            if (song.year === parseInt(val)) {\r\n                return true;\r\n            }\r\n\r\n            if (includes(song.song, val)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    });\r\n}\r\n\r\nfunction Search(props: { songs: song[] }) {\r\n    const [searchResults, setSearchResults] = useState<song[]>([]);\r\n    const [search, setSearch] = useState<string>(\"\");\r\n    const [searchType, setSearchType] = useState<SearchType>(\"all\");\r\n\r\n    const inputChange =\r\n        (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n            setSearch(e.target.value);\r\n        }\r\n\r\n    const handleChange = (e: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        setSearchType(e.target.value as SearchType);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSearchResults(SearchSongs(props.songs, search, searchType));\r\n    }, [search, searchType, props.songs])\r\n\r\n    useEffect(() => {\r\n        if (search === '') {\r\n            document.title = `Boxing references in songs`;\r\n        } else {\r\n            document.title = `Boxing references for \"${search}\"`;\r\n        }\r\n    }, [search]);\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <form noValidate autoComplete=\"off\">\r\n                <Box mr={1} display=\"inline\">\r\n                    <TextField id=\"standard-basic\" label=\"Search\" spellCheck=\"false\" onChange={inputChange}/>\r\n                </Box>\r\n                <Box display=\"inline\">\r\n                    <FormControl>\r\n                        <InputLabel>Type</InputLabel>\r\n                        <Select\r\n                            native\r\n                            onChange={handleChange}\r\n                        >\r\n                            <option value=\"all\">All</option>\r\n                            <option value=\"artist\">Artist/Singer/Rapper</option>\r\n                            <option value=\"song\">Song</option>\r\n                            <option value=\"lyrics\">Lyrics</option>\r\n                            <option value=\"boxer\">Boxer</option>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <GithubLink>\r\n                        <Link target=\"_blank\" rel=\"noopener\" href=\"https://github.com/boxing/boxing-references\">\r\n                            <GitHub/>\r\n                        </Link>\r\n                    </GithubLink>\r\n\r\n                    <TwitterLink>\r\n                        <Link target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/Mike_DiDomizio\">\r\n                            <Twitter/>\r\n                        </Link>\r\n                    </TwitterLink>\r\n                </Box>\r\n            </form>\r\n\r\n            <div>{searchResults.length} result{searchResults.length !== 1 && <span>s</span>}</div>\r\n\r\n            {searchResults.length > 0 &&\r\n            <TableContainer>\r\n                <Table aria-label=\"Songs with Boxing references\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Artist</TableCell>\r\n                            <TableCell>Song</TableCell>\r\n                            <TableCell>Singer/Rapper</TableCell>\r\n                            <TableCell>Boxer</TableCell>\r\n                            <TableCell>Lyrics</TableCell>\r\n                            <TableCell/>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {searchResults.map((song, i) =>\r\n                            <TableRow key={i}>\r\n                                <TableCell>{song.artist}</TableCell>\r\n                                <TableCell>\r\n                                    <Link target=\"_blank\" href={song.metadata.genius}>\r\n                                        {song.song}\r\n                                    </Link></TableCell>\r\n                                <TableCell>{song.singer}</TableCell>\r\n                                <TableCell>{song.boxer}</TableCell>\r\n                                <TableCell><Lyrics>{song.lyrics}</Lyrics></TableCell>\r\n                                <TableCell>\r\n                                    <Youtube id={song.metadata.song.id} source={song.metadata.song.id}\r\n                                             start={song.metadata.song.start}\r\n                                             end={song.metadata.song.end}/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","export interface song {\r\n    song: string;\r\n    year: number;\r\n    artist: string;\r\n    singer: string;\r\n    lyrics: string;\r\n    boxer: string;\r\n    genre: Genre;\r\n    metadata: {\r\n        song: youtubeVideo;\r\n        genius: string;\r\n    }\r\n}\r\n\r\nexport interface youtubeVideo {\r\n    source: \"youtube\";\r\n    id: string;\r\n    start: number;\r\n    end: number;\r\n}\r\n\r\ntype Genre = \"rap\"\r\n\r\nexport const data: song[] = [\r\n    {\r\n        song: \"Surf Swag\",\r\n        year: 2009,\r\n        singer: \"Lil Wayne\",\r\n        artist: \"Lil Wayne\",\r\n        lyrics: \"Weezy beat the beat up like Sonny Liston\\nRedbone do me good then her friend assist her\",\r\n        boxer: \"Sonny Liston\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: 'eRRKlXbIqHY',\r\n                start: 187,\r\n                end: 194,\r\n            },\r\n            genius: 'https://genius.com/13380',\r\n        }\r\n    },\r\n    {\r\n        song: \"Bitch Please\",\r\n        year: 1999,\r\n        artist: \"Snoop Dogg\",\r\n        singer: 'Xzibit',\r\n        lyrics: \"Xzibit ready to Scrap like Mike Tyson with his license back\\n9 to 5 minimum wage? What type of life is that?\",\r\n        boxer: \"Mike Tyson\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: 'y6_cpFMRVQM',\r\n                start: 42,\r\n                end: 50,\r\n            },\r\n            genius: 'https://genius.com/21430388',\r\n        }\r\n    },\r\n    {\r\n        song: \"Young Man Rumble\",\r\n        year: 1994,\r\n        artist: \"Max and Sam\",\r\n        singer: \"Max Kellerman\",\r\n        lyrics: \"Got skills, got stamina\\nGot hands of stone like the champ from Panama\",\r\n        boxer: \"Roberto Duran\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: \"WF0DntqwMKg\",\r\n                start: 77,\r\n                end: 82,\r\n            },\r\n            genius: \"https://genius.com/16338821\",\r\n        }\r\n    },\r\n    {\r\n        song: \"Young Man Rumble\",\r\n        year: 1994,\r\n        artist: \"Max and Sam\",\r\n        singer: \"Max Kellerman\",\r\n        lyrics: \"New York, New York, so nice, got named twice, and...\\nI'm harassing' punks like Mike Tyson\",\r\n        boxer: \"Mike Tyson\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: \"WF0DntqwMKg\",\r\n                start: 102,\r\n                end: 107,\r\n            },\r\n            genius: \"https://genius.com/Max-and-sam-young-man-rumble-lyrics\",\r\n        }\r\n    },\r\n    {\r\n        song: \"Young Man Rumble\",\r\n        year: 1994,\r\n        artist: \"Max and Sam\",\r\n        singer: \"Max Kellerman\",\r\n        lyrics: \"And I’ll break, connive, it's worse\\nThan Pernell Whitaker fuckin' up Chavez\",\r\n        boxer: \"Pernell Whitaker\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: \"WF0DntqwMKg\",\r\n                start: 107,\r\n                end: 112,\r\n            },\r\n            genius: \"https://genius.com/16338821\",\r\n        }\r\n    },\r\n    {\r\n        song: \"Young Man Rumble\",\r\n        year: 1994,\r\n        artist: \"Max and Sam\",\r\n        singer: \"Max Kellerman\",\r\n        lyrics: \"And I’ll break, connive, it's worse\\nThan Pernell Whitaker fuckin' up Chavez\",\r\n        boxer: \"Julio César Chávez\",\r\n        genre: \"rap\",\r\n        metadata: {\r\n            song: {\r\n                source: \"youtube\",\r\n                id: \"WF0DntqwMKg\",\r\n                start: 107,\r\n                end: 112,\r\n            },\r\n            genius: \"https://genius.com/16338821\",\r\n        }\r\n    }\r\n]\r\n\r\n","import './App.css';\nimport Search from \"./components/search\";\nimport {data} from \"./data\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Search songs={data}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}